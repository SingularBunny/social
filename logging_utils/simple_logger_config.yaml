listener:
  # The listener process configuration shows that the full flexibility of
  # logging configuration is available to dispatch events to handlers however
  # you want.
  # We disable existing loggers to disable the "setup" logger used in the
  # parent process. This is needed on POSIX because the logger will
  # be there in the child following a fork().
  'version': 1
  'disable_existing_loggers': true
  'formatters':
    'detailed':
      'class': 'logging.Formatter'
      'format': '%(asctime)s %(name)-15s %(levelname)-8s %(processName)-10s %(message)s'
    'simple':
      'class': 'logging.Formatter'
      'format': '%(name)-15s %(levelname)-8s %(processName)-10s %(message)s'
  'handlers':
    'console':
      'class': 'logging.StreamHandler'
      'level': 'INFO'
      'formatter': 'simple'
    'file':
      'class': 'logging.FileHandler'
      'filename': 'mplog.log'
      'mode': 'w'
      'formatter': 'detailed'
    'errors':
      'class': 'logging.FileHandler'
      'filename': 'mplog-errors.log'
      'mode': 'w'
      'level': 'ERROR'
      'formatter': 'detailed'
  'root':
    'level': 'DEBUG'
    'handlers': ['console', 'file', 'errors']
worker:
  # The worker process configuration is just a QueueHandler attached to the
  # root logger, which allows all messages to be sent to the queue.
  # We disable existing loggers to disable the "setup" logger used in the
  # parent process. This is needed on POSIX because the logger will
  # be there in the child following a fork().
  'version': 1
  'disable_existing_loggers': true
  'handlers':
    'queue':
      'class': 'logging_utils.handlers.QueueHandler'
      #'queue': q # should be configured in code
  'root':
    'level': 'DEBUG'
    'handlers': ['queue']